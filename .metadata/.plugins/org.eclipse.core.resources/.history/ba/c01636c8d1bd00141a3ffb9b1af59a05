package com.example.cellshock;
import java.util.Random;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Paint;
import android.view.SurfaceHolder;
import android.view.SurfaceView;


@SuppressLint("WrongCall")//Needed to suppress the lint error
public class ScreenView extends SurfaceView implements Runnable{
	
	
	SurfaceHolder holder; //Surface holder for the canvas
	private boolean ok = false; //Boolean to control pause and resume
	
	Thread t = null; //Thread for the game logic
	Cell[] ballArray = new Cell[2]; //array of balls
	//BreakBlock[] blockArray1 = new BreakBlock[13];  //array of block
	//BreakBlock[] blockArray2 = new BreakBlock[13];  //array of block
	//BreakBlock paddle = new BreakBlock(35,15,200, 400,Color.rgb(0, 255, 0), false);
	private Score score = new Score(20);
	Random generator = new Random(); 
	Paint paint = new Paint();
	private Collision collision = new Collision();
	public ScreenView(Context context, int w, int h) {
	super(context);
	holder = getHolder();//Used for the screenview
	   

    //Bouncing ball
    
    	for(int i=0; i<ballArray.length; i++){
    	
    	int ra = 20;
    	
    	int x = 150;
    	int y = 300;
    	
    	int vX = 1;
    	int vY = 1;
        int r = 0;
        int g = 255;
        int b = 0;
      
    	ballArray[i] = new Cell(ra,x,y,vX, vY,Color.rgb(255,255,255), 20);
    	 ballArray[i].setScreenWidth(w);
    	 ballArray[i].setScreenHeight(h);
    	 
    	 x =+ 50;
    	 y =- 50;
    	}
    	
	}
	
	 
	
	protected void onDraw(Canvas canvas){
		//As with other threads, here is where we can update the assets such as.....
		//canvas.drawARGB(255, 100, 100,0); //Add a background colour
		Bitmap b = BitmapFactory.decodeResource(getResources(), R.drawable.bckground);
		canvas.drawARGB(255, 0, 0, 250);
		//testBreak.drawRect(paint, canvas);
		//moveBreak.drawRect(paint, canvas);
		
		
		    	
			 ballArray[0].update();
			 ballArray[0].drawCell(paint, canvas);
			 
			 ballArray[1].update();
			 ballArray[1].drawCell(paint, canvas);
		    	
		 
		 if(collision.circleCircleCollision(ballArray[0], ballArray[1]) ==true)
		 {
			 collision.resolve(ballArray[0], ballArray[1]);
		 }
		 canvas.drawText(score.getScoreString(), 150, 300, paint);
    }
	
	public void run() {
		//Remove conflict between the UI thread and the game thread.
		android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
		
		while (ok == true){
			//perform canvas drawing
			if(!holder.getSurface().isValid()){//if surface is not valid
				continue;//skip anything below it
			}
			Canvas c = holder.lockCanvas(); //Lock canvas, paint canvas, unlock canvas
			this.onDraw(c);
			holder.unlockCanvasAndPost(c);
		}
	}
	
	public void pause(){
		ok = false;
		while(true){
			try{
				t.join();
			}catch(InterruptedException e){
				e.printStackTrace();
			}
			break;
		}
		t = null;
	}
	
	public void resume(){
		ok = true;
		t = new Thread(this);
		t.start();
	}
	
	public void updatePos(float xPos, float yPos){
		ballArray[0].setxPos(xPos);
		ballArray[0].setyPos(yPos);
	}
	
	public void startBall(int velX, int velY){
		ballArray[0].setVelocity(velX, velY);
	}
}